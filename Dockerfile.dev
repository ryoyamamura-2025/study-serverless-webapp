# Dockerfile
# 1) ベースイメージ：軽量な Python
FROM python:3.12-slim

# 2) uv（高速パッケージマネージャ）を取り込み
#    別イメージから /uv /uvx バイナリをコピーするワンライナー
COPY --from=ghcr.io/astral-sh/uv:0.8.14 /uv /uvx /bin/

# OpenCVや動画の処理用
RUN apt-get update && apt-get install -y --no-install-recommends \
    libgl1 \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# 3) 作業ディレクトリ
WORKDIR /app

# 4) 依存だけインストール（中間レイヤ）
#    - BuildKitのRUN --mount を使って、pyproject/lock を"一時的に"供給
#    - --no-install-project：プロジェクト本体はまだ入れない（依存だけ）
#    - --locked：uv.lockがあれば厳守（無い場合は外してもOK）
#    - type=cache：uv のダウンロードキャッシュを使い回す
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    uv sync --locked --no-install-project

# 5) ここで初めてソースをコピー
COPY pyproject.toml uv.lock ./
COPY ./app ./

# 6) プロジェクト本体を editable で同期（デフォルトが editable）
RUN --mount=type=cache,target=/root/.cache/uv uv sync --locked

# 7) Cloud Run は 8080 がデフォルトなので開けておく
EXPOSE 8080

# 8) コンテナ起動時のコマンド
#    uv 経由で uvicorn を実行。main:app を 0.0.0.0:8080 で起動
CMD ["uv", "run", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--reload"]